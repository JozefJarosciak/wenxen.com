import json
import base64
import mimetypes
from urllib.parse import unquote

# Embedded static files (will be populated by Terraform)
STATIC_FILES = {
    'index.html': '',
    'README.md': 'WEVOIFRyYWNrZXIgZm9yIEV0aGVyZXVtCgpPdmVydmlldwoKLSBUcmFjayBhbmQgYWN0IG9uIFhFTiBtaW50cywgWEVORlRzLCBhbmQgWEVOIHN0YWtlcyBvbiBFdGhlcmV1bSBNYWlubmV0IGluIGEgZmFzdCwgcHJpdmFjeeKAkWF3YXJlIHdlYiBVSS4KCi0gVW5saWtlIG1vc3QgWEVOIHRyYWNrZXJzIHRoYXQgcmVxdWlyZSB5b3UgdG8gbWFudWFsbHkgZW50ZXIgZWFjaCBtaW50LCBvdXJzIG5lZWRzIG9ubHkgeW91ciBFdGhlcmV1bSBhZGRyZXNzLiBKdXN0IGVudGVyIGl0IG9uY2UsIGhpdCDigJxTY2FuLOKAnSBhbmQgeW914oCZcmUgc2V04oCUbm8gbmVlZCB0byByZW1lbWJlciB3aGF0IHRvIGFkZCBsYXRlci4KLSBBbmQgdW5saWtlIHRyYWNrZXJzIHRoYXQgcmVseSBvbiB0aGlyZC1wYXJ0eSBzZXJ2ZXJzIGFuZCBkYXRhYmFzZXMgKHdoaWNoIGNhbiBnbyBkb3duIHdoZW4gdGhvc2Ugc2VydmljZXMgaGF2ZSBvdXRhZ2VzKSwgdGhpcyB0cmFja2VyIGZyb20gWGVuLnB1YiBydW5zIGVudGlyZWx5IGluIHlvdXIgYnJvd3Nlci4gSXQgYnVpbGRzIGFuZCBtYWludGFpbnMgaXRzIG93biBsb2NhbCBkYXRhIHN0b3JlLCB1c2luZyBvbmx5IHB1YmxpYyBFdGhlcmV1bSBSUEMgZW5kcG9pbnRzIGFuZCwgb3B0aW9uYWxseSwgYSBmcmVlIEV0aGVyc2NhbiBBUEkga2V5IHRvIGZ1bGx5IHNjYW4gWEVOIG1pbnRzIGFuZCByZWxhdGVkIGNvbnRyYWN0cy4KIAotIFB1cmUgZnJvbnTigJFlbmQgKEhUTUwvQ1NTL0pTKS4gTGlicmFyaWVzOiBXZWIzLmpzLCBUYWJ1bGF0b3IsIENoYXJ0LmpzL0VDaGFydHMsIEZsYXRwaWNrci4KLSBXYWxsZXQgY29ubmVjdHMgdmlhIE1ldGFNYXNrL1JhYmJ5OyBhcHAgb25seSBzdGF5cyBjb25uZWN0ZWQgb24gRXRoZXJldW0gTWFpbm5ldC4KCi0gSW4gYWRkaXRpb24gdG8gdHJhY2tpbmcsIHRoZSBhcHAgYWxsb3dzIGNsYWltaW5nIGRpcmVjdGx5IGZyb20gdGhlIFVJOiBYRU5GVCBhbmQgQ29pbnRvb2wgbWludHMsIHNpbmdsZeKAkXdhbGxldCBYRU5GVCBzdGFrZXMsIGFuZCBiYXRjaOKAkWNsYWltaW5nIG11bHRpcGxlIENvaW50b29sIG1pbnRzLgotIFRoZSBlbnRpcmUgc29sdXRpb24gaXMgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL0pvemVmSmFyb3NjaWFrL3hlbnRyYWNrZXIiIHRhcmdldD0iX2JsYW5rIj48dT5vcGVuIHNvdXJjZTwvdT48L2E+OyB5b3UgY2FuIHNlbGbigJFob3N0IGl0IChvciBydW4gbG9jYWxseSkuCgpDb3JlIEZlYXR1cmVzCgotIERhc2hib2FyZDogQ2FsZW5kYXIgYmFkZ2VzICsgcXVpY2sgZmlsdGVyLCBmaWx0ZXJhYmxlIHRhYmxlIChUYWJ1bGF0b3IpLCBjaGFydCBtaXJyb3JzIHZpc2libGUgcm93cywgZ2FzIHdhdGNoZXIgKDXigJM2MHMpIHdpdGggY291bnRkb3duLgotIE1pbnQvU3Rha2U6IENvaW50b29sIG9yIFhFTkZUIChSZWd1bGFyL0FQRVgpIG1pbnRpbmc7IFhFTiBzdGFraW5nIHdpdGggYmFsYW5jZSBoZWxwZXJzIGFuZCB3aG9sZeKAkXRva2VuIHJvdW5kaW5nLiBQcm9tcHRzIHRvIGNvbm5lY3Q7IHJlcXVpcmVzIE1haW5uZXQuCi0gU2V0dGluZ3M6IEFkZHJlc3MgbGlzdCAobWFzayB0b2dnbGUpLCBFdGhlcnNjYW4ga2V5IChoaW50ICsgZGVmYXVsdCB2aXNpYmxlKSwgUlBDIGltcG9ydC9yYW5raW5nIHdpdGggcHJvZ3Jlc3MsIGJhY2t1cC9yZXN0b3JlIGluY2x1ZGluZyBwcml2YWN5IG1hc2tzLgotIFdhbGxldDogQ29ubmVjdC9EaXNjb25uZWN0IHRvZ2dsZSwgd2FsbGV0IHRleHQgbWFzaywgc3RyaWN0IE1haW5uZXQgZ2F0ZSAob2Zm4oCRTWFpbm5ldCB0cmlnZ2VycyBwcm9tcHQgYW5kIGRpc2Nvbm5lY3QpLgoKRmlsZXMKCi0gaW5kZXguaHRtbDogVGFicyBhbmQgVUkuCi0gY3NzL3N0eWxlLmNzczogTGF5b3V0IGFuZCBtYXNraW5nIHN0eWxlcy4KLSBqcy9hcHAuanM6IERhc2hib2FyZCwgc2Nhbm5pbmcsIGNoYXJ0L2NhbGVuZGFyL2dhcywgd2FsbGV0LCBzZXR0aW5ncywgYmFja3VwLgotIGpzL2FwcC1taW50LmpzOiBNaW50L1N0YWtlIGZsb3dzIGFuZCBzdGFraW5nIGhlbHBlcnMuCgpUYWJzCgotIERhc2hib2FyZDogQ2FsZW5kYXIgZmlsdGVyLCB0YWJsZSwgYW5kIGNoYXJ0OyBnYXMgd2F0Y2hlciB3aXRoIGNvdW50ZG93bi4KLSBNaW50L1N0YWtlOiBTZWxlY3QgYWN0aW9uLiBNaW50IHZpYSBDb2ludG9vbC9YRU5GVCAoQVBFWCBzdXBwb3J0cyBidXJuICsgYXV0b+KAkWFwcHJvdmUpLiBTdGFrZSB3aXRoIGJhbGFuY2UvcGVyY2VudCBoZWxwZXJzIGFuZCB3aG9sZeKAkXRva2VuIHJvdW5kaW5nLgotIFNldHRpbmdzOiBBZGRyZXNzZXMsIEFQSSBrZXkgKHdpdGggaGludCBhbmQgbWFza2luZyksIFJQQyBpbXBvcnQvcmFua2luZyB3aXRoIHByb2dyZXNzLCBhbmQgYmFja3VwL3Jlc3RvcmUuCgpCZWhhdmlvcgoKLSBNYWlubmV04oCRb25seTogT24gY29ubmVjdCBvciBuZXR3b3JrIGNoYW5nZSwgdGhlIGFwcCBlbmZvcmNlcyBFdGhlcmV1bSBNYWlubmV0IChvdGhlcndpc2UgcHJvbXB0cyBhbmQgZGlzY29ubmVjdHMpLgotIFByaXZhY3k6IEFkZHJlc3MvQVBJIGtleS93YWxsZXQgdGV4dCBtYXNraW5nIHBlcnNpc3RzIGxvY2FsbHkgYW5kIGlzIGluY2x1ZGVkIGluIGJhY2t1cHMuCi0gQ2hhcnQ6IFBsb3RzIG9ubHkgdmlzaWJsZS9maWx0ZXJlZCB0YWJsZSByb3dzOyBibGFuayB3aGVuIHRoZSB0YWJsZSBpcyBlbXB0eS4KCkNoYXJ0cyBhbmQgVG9vbHRpcHMKCi0gVGhlIGNoYXJ0IHNob3dzIG9ubHkgdGhlIGN1cnJlbnRseSB2aXNpYmxlL2ZpbHRlcuKAkW1hdGNoZWQgdGFibGUgZGF0YS4KCkdldHRpbmcgU3RhcnRlZAoKLSBTZXJ2ZSBsb2NhbGx5IGFuZCBvcGVuIGluIGEgbW9kZXJuIGJyb3dzZXIuIE5vdGU6IE9wZW5pbmcgdGhlIGZpbGUgZGlyZWN0bHkgY2FuIHdvcmssIGJ1dCBhIGxvY2FsIG9yIGNsb3VkIGhvc3RlZCBodHRwIHNlcnZlciBpcyByZWNvbW1lbmRlZC4KLSBTZXR0aW5nczogYWRkIGFkZHJlc3NlcywgcGFzdGUgRXRoZXJzY2FuIGtleSAobGluayBwcm92aWRlZCksIGltcG9ydC9yYW5rIFJQQ3MsIGFuZCBvcHRpb25hbGx5IGFkanVzdCBnYXMgcmVmcmVzaCBhbmQgbWFza2luZy4KLSBEYXNoYm9hcmQ6IGNob29zZSBhIFNjYW4gbW9kZSwgY2xpY2sgU2NhbiwgZmlsdGVyIHZpYSBoZWFkZXJzIG9yIGNhbGVuZGFyOyBjaGFydCBtaXJyb3JzIHRoZSB0YWJsZS4KLSBNaW50L1N0YWtlOiBjb25uZWN0IHdhbGxldCAoTWFpbm5ldCByZXF1aXJlZCksIGNvbmZpZ3VyZSBvcHRpb25zLCBhbmQgY2xpY2sgU3RhcnQgTWludGluZy9TdGFydCBTdGFraW5nLgotIEJhY2t1cDogZXhwb3J0IHlvdXIgc2V0dGluZ3MgKGluY2x1ZGluZyBtYXNraW5nKSBmcm9tIHRoZSBTZXR0aW5ncyB0YWIuCgpSZXF1aXJlbWVudHMKCi0gTW9kZXJuIGJyb3dzZXIgd2l0aCBFUzIwMjAgc3VwcG9ydC4KLSBJbmplY3RlZCB3YWxsZXQgKE1ldGFNYXNrLCBSYWJieSkgZm9yIG1pbnQvc3Rha2UgZmxvd3MuCi0gT3B0aW9uYWw6IEV0aGVyc2NhbiBBUEkga2V5IGZvciByaWNoZXIgc2NhbiBmdW5jdGlvbmFsaXR5IGFuZCBoaWdoZXIgcmVsaWFiaWxpdHkuCgpQcml2YWN5CgotIE1hc2tpbmc6IEV0aGVyZXVtIGFkZHJlc3NlcywgQVBJIGtleXMsIGFuZCB0aGUgd2FsbGV0IGRpc3BsYXkgdGV4dCBjYW4gYmUgYmx1cnJlZC4gTWFzayBzdGF0ZSBwZXJzaXN0cyBpbiBsb2NhbCBTdG9yYWdlIGFuZCBpcyBpbmNsdWRlZCBpbiBiYWNrdXBzLgotIERhdGE6IFRoZSBhcHAgc3RvcmVzIHNldHRpbmdzIGluIHlvdXIgYnJvd3NlciBvbmx5OyBiYWNrdXBzL2V4cG9ydCBhcmUgdXNlcuKAkWluaXRpYXRlZCBKU09OIGZpbGVzLiBUaGUgYXBwIGRvZXMgbm90IHN0b3JlIGFueSBwcml2YXRlIGtleXMgaW4gdGhlIGJyb3dzZXIuCgpUcm91Ymxlc2hvb3RpbmcKCi0gUlBDIGltcG9ydCBzdGFsbHMKICAtIFRoZSBpbXBvcnQgYnV0dG9uIHN0YXlzIGRpc2FibGVkIHdoaWxlIHJ1bm5pbmcuIFN0b3AgdGhlIHByb2Nlc3Mgb3IgcmVmcmVzaCB0aGUgcGFnZSwgdGhlbiB0cnkgYWdhaW4gd2l0aCBhIGRpZmZlcmVudCBSUEMuIFdhaXQgZm9yIGNvbXBsZXRpb24gb3IgY2hlY2sgdGhlIHByb2dyZXNzIHBhbmVsIGZvciBmYWlsdXJlcy4KLSBDaGFydCBub3QgdXBkYXRpbmcKICAtIFRoZSBjaGFydCBtaXJyb3JzIHRoZSB0YWJsZTsgZW5zdXJlIGZpbHRlcnMgYXJlIHNldCBhcyBleHBlY3RlZCBvciBjbGVhciB0aGVtIHRvIHJlcG9wdWxhdGUuCi0g4oCcUGxlYXNlIHN3aXRjaCB5b3VyIHdhbGxldCB0byBFdGhlcmV1bSBNYWlubmV04oCm4oCdCiAgLSBUaGUgYXBwIGVuZm9yY2VzIG1haW5uZXQuIFN3aXRjaCB0aGUgbmV0d29yayBpbiB5b3VyIHdhbGxldCBhbmQgcmVjb25uZWN0LgoKTGljZW5zZSAoQUdQTOKAkTMuMCkKCi0gR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIHYzLgotIENvcHlsZWZ0OiBkZXJpdmF0aXZlcyBtdXN0IHJlbWFpbiBBR1BM4oCRMy4wLgotIE5ldHdvcmsgdXNlID0gZGlzdHJpYnV0aW9uOiBpZiB5b3UgaG9zdCBhIG1vZGlmaWVkIHZlcnNpb24sIHlvdSBtdXN0IHByb3ZpZGUgaXRzIGNvbXBsZXRlIGNvcnJlc3BvbmRpbmcgc291cmNlIHRvIHVzZXJzLgotIEtlZXAgbGljZW5zZSBub3RpY2VzOyBhZGQgbm8gZXh0cmEgcmVzdHJpY3Rpb25zLgotIEZ1bGwgdGV4dDogaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLTMuMC5odG1sCgpBdHRyaWJ1dGlvbgoKLSBCdWlsdCB3aXRoIFRhYnVsYXRvciwgQ2hhcnQuanMsIEVDaGFydHMsIEZsYXRwaWNrciwgYW5kIFdlYjMuanMuIFdhbGxldCBwcm92aWRlciB2aWEgTWV0YU1hc2svUmFiYnkuCg==',
        'css/base.css': '',
        'css/style.css': '',
        'css/theme-dark.css': '',
        'css/theme-light.css': 'LyogR2VuZXJhdGVkIGZyb20gc3R5bGUuY3NzIHNwbGl0IGJ5IHRoZW1lLiAqLwpib2R5LmxpZ2h0LW1vZGUgewogIC0tYm9yZGVyOiAjZTVlN2ViOwogIC0tcGFuZWw6ICNmZmY7CiAgLS1idG4tYmc6ICNmOGZhZmM7CiAgLS1idG4tZmc6ICMxMTE4Mjc7CiAgLS1tdXRlZDogIzZiNzI4MDsKICAtLWlucHV0LWJnOiAjZmZmOwogIC0tYnRuLWhvdmVyLWJnOiAjZGJlYWZlOwogIC0tYnRuLWhvdmVyLWJvcmRlcjogIzkzYzVmZDsKfQpib2R5LmxpZ2h0LW1vZGUgI3RoZW1lU2VsZWN0IG9wdGlvbiB7CiAgYmFja2dyb3VuZDogI2ZmZmZmZjsKICBjb2xvcjogIzExMTgyNzsKfQpib2R5LmxpZ2h0LW1vZGUgI3Jlc2V0RGJTZWxlY3Qgb3B0aW9uLCBib2R5LmxpZ2h0LW1vZGUgI21pbnRBY3Rpb24gb3B0aW9uIHsKICBiYWNrZ3JvdW5kOiAjZmZmZmZmOwogIGNvbG9yOiAjMTExODI3Owp9CmJvZHkubGlnaHQtbW9kZSB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsKICBjb2xvcjogIzAwMDAwMAp9CmJvZHkubGlnaHQtbW9kZSBpbnB1dCwgYm9keS5saWdodC1tb2RlIHRleHRhcmVhLCBib2R5LmxpZ2h0LW1vZGUgYnV0dG9uIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogIGNvbG9yOiAjMDAwOwogIGJvcmRlcjogMXB4IHNvbGlkICNjY2MKfQpib2R5LmxpZ2h0LW1vZGUgLnRhYnVsYXRvciB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICBjb2xvcjogIzAwMAp9CmJvZHkubGlnaHQtbW9kZSAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1OwogIGNvbG9yOiAjMDAwOwogIGJvcmRlci1jb2xvcjogI2NjYwp9CmJvZHkubGlnaHQtbW9kZSAudGFidWxhdG9yIC50YWJ1bGF0b3ItY2VsbCB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICBjb2xvcjogIzAwMDsKICBib3JkZXItY29sb3I6ICNjY2MKfQpib2R5LmxpZ2h0LW1vZGUgLnRhYnVsYXRvciAudGFidWxhdG9yLXJvdyB7CiAgYm9yZGVyLWNvbG9yOiAjY2NjCn0KYm9keS5saWdodC1tb2RlIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgewogIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7CiAgY29sb3I6ICMwMDA7CiAgYm9yZGVyLWNvbG9yOiAjY2NjCn0KYm9keS5saWdodC1tb2RlIC5idG4tbWludCB7CiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgY29sb3I6IHZhcigtLWJ0bi1mZywgIzExMTgyNyk7CiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLCAjZTVlN2ViKQp9CmJvZHkubGlnaHQtbW9kZSAuYnRuLW1pbnQ6aG92ZXIgewogIGJhY2tncm91bmQ6ICNkYmVhZmU7CiAgYm9yZGVyLWNvbG9yOiAjOTNjNWZkCn0KYm9keS5saWdodC1tb2RlICNjYWxlbmRhci14ZW4tdG90YWwgI2VzdFhlblVzZCB7CiAgY29sb3I6ICMwODU5MDM7CiAgZm9udC13ZWlnaHQ6IDYwMDsKfQovKiBFeHBsaWNpdGx5IGVuc3VyZSBjb250ZW50IGlzIGxlZnQtYWxpZ25lZCAqLwpib2R5LmxpZ2h0LW1vZGUgLnNldHRpbmdzLWNhcmQgewogIHRleHQtYWxpZ246IGxlZnQ7Cn0KYm9keS5saWdodC1tb2RlIC5zZXR0aW5ncy1jYXJkIGgzLApib2R5LmxpZ2h0LW1vZGUgLnNldHRpbmdzLWNhcmQgcCwKYm9keS5saWdodC1tb2RlIC5zZXR0aW5ncy1jYXJkIGxhYmVsLApib2R5LmxpZ2h0LW1vZGUgLmZpZWxkIHsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci8qIEVuc3VyZSBidXR0b25zIGFyZSBsZWZ0LWFsaWduZWQgKi8KYm9keS5saWdodC1tb2RlIC5zZXR0aW5ncy1jYXJkIC5idXR0b24tcm93LApib2R5LmxpZ2h0LW1vZGUgLnNldHRpbmdzLWNhcmQgYnV0dG9uLApib2R5LmxpZ2h0LW1vZGUgLnNldHRpbmdzLWNhcmQgLmJ1dHRvbi1saWtlIHsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9CmJvZHkubGlnaHQtbW9kZSAuc2V0dGluZ3MtY2FyZCAuYnV0dG9uLXJvdyB7CiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0Owp9Ci8qIE1vZGFsIHN0eWxpbmcgZm9yIGxpZ2h0IHRoZW1lICovCmJvZHkubGlnaHQtbW9kZSAubW9kYWwtY29udGVudCB7CiAgYmFja2dyb3VuZDogdmFyKC0tcGFuZWwsICNmZmYpOwogIGNvbG9yOiB2YXIoLS1idG4tZmcsICMxMTE4MjcpOwogIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJvcmRlciwgI2U1ZTdlYik7Cn0KYm9keS5saWdodC1tb2RlIC5tb2RhbC1jb250ZW50IGgzLApib2R5LmxpZ2h0LW1vZGUgLm1vZGFsLWNvbnRlbnQgcCB7CiAgY29sb3I6IHZhcigtLWJ0bi1mZywgIzExMTgyNyk7Cn0KYm9keS5saWdodC1tb2RlIC5tb2RhbC1hY3Rpb25zIGJ1dHRvbiB7CiAgYmFja2dyb3VuZDogdmFyKC0tYnRuLWJnLCAjZjhmYWZjKTsKICBjb2xvcjogdmFyKC0tYnRuLWZnLCAjMTExODI3KTsKICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXIsICNlNWU3ZWIpOwp9CmJvZHkubGlnaHQtbW9kZSAubW9kYWwtYWN0aW9ucyBidXR0b246aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLWJ0bi1ob3Zlci1iZywgI2RiZWFmZSk7CiAgYm9yZGVyLWNvbG9yOiB2YXIoLS1idG4taG92ZXItYm9yZGVyLCAjOTNjNWZkKTsKfQpib2R5LmxpZ2h0LW1vZGUgLm1vZGFsLWFjdGlvbnMgYnV0dG9uLnNlY29uZGFyeSB7CiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgY29sb3I6IHZhcigtLW11dGVkLCAjNmI3MjgwKTsKfQovKiBFbnN1cmUgQUxMIGVsZW1lbnRzIGluc2lkZSBwcm9ncmVzc0NvbnRhaW5lciBoYXZlIG1hdGNoaW5nIGJhY2tncm91bmQgKi8KYm9keS5saWdodC1tb2RlICNwcm9ncmVzc0NvbnRhaW5lciAqIHsKICBiYWNrZ3JvdW5kOiAjZmZmNWY1ICFpbXBvcnRhbnQ7IC8qIGZvcmNlIHNhbWUgYXMgcHJvZ3Jlc3NDb250YWluZXIgKi8KfQpib2R5LmxpZ2h0LW1vZGUgI3Rva2VuUHJvZ3Jlc3NUZXh0LApib2R5LmxpZ2h0LW1vZGUgI2FkZHJlc3NQcm9ncmVzc1RleHQsCmJvZHkubGlnaHQtbW9kZSAjYWRkcmVzc1Byb2dyZXNzQ29udGFpbmVyLApib2R5LmxpZ2h0LW1vZGUgI3Rva2VuUHJvZ3Jlc3NDb250YWluZXIsCmJvZHkubGlnaHQtbW9kZSAjc2NhblR5cGVMaW5lLApib2R5LmxpZ2h0LW1vZGUgI2V0clRleHQsCmJvZHkubGlnaHQtbW9kZSAjcnBjU3RhdHVzIHsKICBiYWNrZ3JvdW5kOiAjZmZmNWY1ICFpbXBvcnRhbnQ7IC8qIHNhbWUgYXMgcHJvZ3Jlc3NDb250YWluZXIgKi8KfQovKiBSZW1vdmUgYm9yZGVycyBmcm9tIHByb2dyZXNzIHRleHQgZWxlbWVudHMgKi8KYm9keS5saWdodC1tb2RlICN0b2tlblByb2dyZXNzVGV4dCwKYm9keS5saWdodC1tb2RlICNhZGRyZXNzUHJvZ3Jlc3NUZXh0LApib2R5LmxpZ2h0LW1vZGUgI3JwY1N0YXR1cyB7CiAgYm9yZGVyOiBub25lICFpbXBvcnRhbnQ7Cn0KCi8qIEZsYXRwaWNrciBjYWxlbmRhciBzdHlsaW5nIGZvciBsaWdodCB0aGVtZSAqLwpib2R5LmxpZ2h0LW1vZGUgLmZsYXRwaWNrci1jYWxlbmRhciB7CiAgYmFja2dyb3VuZDogI2ZmZmZmZjsKICBib3JkZXI6IDFweCBzb2xpZCAjZTVlN2ViOwogIGJveC1zaGFkb3c6IDAgMTBweCAzMHB4IHJnYmEoMCwgMCwgMCwgMC4xNSk7CiAgYm9yZGVyLXJhZGl1czogOHB4Owp9Cgpib2R5LmxpZ2h0LW1vZGUgLmZsYXRwaWNrci1tb250aHMgewogIGJhY2tncm91bmQ6ICNmZmZmZmY7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlNWU3ZWI7Cn0KCmJvZHkubGlnaHQtbW9kZSAuZmxhdHBpY2tyLWN1cnJlbnQtbW9udGggewogIGNvbG9yOiAjMTExODI3Owp9Cgpib2R5LmxpZ2h0LW1vZGUgLmZsYXRwaWNrci1jdXJyZW50LW1vbnRoIC5udW1JbnB1dFdyYXBwZXIgewogIGNvbG9yOiAjMTExODI3Owp9Cgpib2R5LmxpZ2h0LW1vZGUgLmZsYXRwaWNrci1jdXJyZW50LW1vbnRoIGlucHV0IHsKICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICBjb2xvcjogIzExMTgyNzsKICBib3JkZXI6IG5vbmU7Cn0KCmJvZHkubGlnaHQtbW9kZSAuZmxhdHBpY2tyLXdlZWtkYXlzIHsKICBiYWNrZ3JvdW5kOiAjZjlmYWZiOwogIGNvbG9yOiAjNmI3MjgwOwogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTVlN2ViOwp9Cgpib2R5LmxpZ2h0LW1vZGUgLmZsYXRwaWNrci13ZWVrZGF5IHsKICBjb2xvcjogIzZiNzI4MDsKICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOwogIGZvbnQtd2VpZ2h0OiA2MDA7Cn0KCmJvZHkubGlnaHQtbW9kZSAuZmxhdHBpY2tyLWRheXMgewogIGJhY2tncm91bmQ6ICNmZmZmZmY7Cn0KCmJvZHkubGlnaHQtbW9kZSAuZmxhdHBpY2tyLWRheSB7CiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgY29sb3I6ICMxMTE4Mjc7CiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7Cn0KCmJvZHkubGlnaHQtbW9kZSAuZmxhdHBpY2tyLWRheTpob3ZlciB7CiAgYmFja2dyb3VuZDogI2YzZjRmNjsKICBib3JkZXItY29sb3I6ICNkMWQ1ZGI7Cn0KCmJvZHkubGlnaHQtbW9kZSAuZmxhdHBpY2tyLWRheS5zZWxlY3RlZCB7CiAgYmFja2dyb3VuZDogIzI1NjNlYjsKICBjb2xvcjogI2ZmZmZmZjsKICBib3JkZXItY29sb3I6ICMyNTYzZWI7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQoKYm9keS5saWdodC1tb2RlIC5mbGF0cGlja3ItZGF5LnRvZGF5IHsKICBiYWNrZ3JvdW5kOiByZ2JhKDM3LCA5OSwgMjM1LCAwLjEpOwogIGNvbG9yOiAjMjU2M2ViOwogIGJvcmRlci1jb2xvcjogIzI1NjNlYjsKICBmb250LXdlaWdodDogNjAwOwp9Cgpib2R5LmxpZ2h0LW1vZGUgLmZsYXRwaWNrci1kYXkucHJldk1vbnRoRGF5LApib2R5LmxpZ2h0LW1vZGUgLmZsYXRwaWNrci1kYXkubmV4dE1vbnRoRGF5IHsKICBjb2xvcjogIzljYTNhZjsKICBvcGFjaXR5OiAwLjY7Cn0KCmJvZHkubGlnaHQtbW9kZSAuZmxhdHBpY2tyLW1vbnRocyAuZmxhdHBpY2tyLW1vbnRoIHsKICBjb2xvcjogIzExMTgyNzsKfQoKYm9keS5saWdodC1tb2RlIC5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItcHJldi1tb250aCwKYm9keS5saWdodC1tb2RlIC5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItbmV4dC1tb250aCB7CiAgY29sb3I6ICMxMTE4Mjc7CiAgZmlsbDogIzExMTgyNzsKfQoKYm9keS5saWdodC1tb2RlIC5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItcHJldi1tb250aDpob3ZlciwKYm9keS5saWdodC1tb2RlIC5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItbmV4dC1tb250aDpob3ZlciB7CiAgY29sb3I6ICMyNTYzZWI7CiAgZmlsbDogIzI1NjNlYjsKfQoKYm9keS5saWdodC1tb2RlIC5mbGF0cGlja3ItdG9kYXktYnRuIHsKICBiYWNrZ3JvdW5kOiAjZmZmZmZmOwogIGNvbG9yOiAjMTExODI3OwogIGJvcmRlcjogMXB4IHNvbGlkICNkMWQ1ZGI7CiAgYm9yZGVyLXJhZGl1czogNnB4Owp9Cgpib2R5LmxpZ2h0LW1vZGUgLmZsYXRwaWNrci10b2RheS1idG46aG92ZXIgewogIGJhY2tncm91bmQ6ICNmOWZhZmI7CiAgYm9yZGVyLWNvbG9yOiAjOWNhM2FmOwp9',
        'css/theme-matrix.css': '',
        'css/theme-retro.css': 'LyogR2VuZXJhdGVkIGZyb20gc3R5bGUuY3NzIHNwbGl0IGJ5IHRoZW1lLiAqLwpib2R5LnJldHJvLW1vZGUgewogIC0tYm9yZGVyOiAjNGU1YmQ0OwogIC0tcGFuZWw6ICAjMGExZGI4OwogIC0tYnRuLWJnOiAjMGExZGI4OwogIC0tYnRuLWZnOiAjYzdmZmY3OwogIC0tbXV0ZWQ6ICAjOGFiNGZmOwogIC0taW5wdXQtYmc6ICMwNjEzOGE7CiAgLS1idG4taG92ZXItYmc6ICMyNzQ5ZGM7CiAgLS1idG4taG92ZXItYm9yZGVyOiAjNGU1YmQ0OwoKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDQxNEE3OwogIGNvbG9yOiAjYzdmZmY3OwogIGZvbnQtZmFtaWx5OiAnVlQzMjMnLCBtb25vc3BhY2U7CiAgbGV0dGVyLXNwYWNpbmc6IDAuM3B4Owp9CmJvZHkucmV0cm8tbW9kZSBhIHsKIGNvbG9yOiAjZmZlYTdhOyAKfQpib2R5LnJldHJvLW1vZGUgLm11dGVkIHsKIGNvbG9yOiB2YXIoLS1tdXRlZCk7IAp9CmJvZHkucmV0cm8tbW9kZSBzZWxlY3QgewogYmFja2dyb3VuZDogdmFyKC0tcGFuZWwpOyBjb2xvcjogdmFyKC0tYnRuLWZnKTsgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyKTsgCn0KYm9keS5yZXRyby1tb2RlICNuZXR3b3JrTmFtZSB7CiBiYWNrZ3JvdW5kOiAjMGExZGI4OyBjb2xvcjogI2M3ZmZmNzsgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyKTsgCn0KYm9keS5yZXRyby1tb2RlIC53YWxsZXQtcmV2ZWFsLWJ0biB7CiBiYWNrZ3JvdW5kOiB2YXIoLS1wYW5lbCk7IGNvbG9yOiB2YXIoLS1idG4tZmcpOyBib3JkZXItY29sb3I6IHZhcigtLWJvcmRlcik7IAp9CmJvZHkucmV0cm8tbW9kZSAubWVudS10b2dnbGUgewogYmFja2dyb3VuZDogdmFyKC0tcGFuZWwpOyBjb2xvcjogdmFyKC0tYnRuLWZnKTsgYm9yZGVyLWNvbG9yOiB2YXIoLS1ib3JkZXIpOyAKfQpib2R5LnJldHJvLW1vZGUgLm1lbnUtcGFuZWwgewogYmFja2dyb3VuZDogdmFyKC0tcGFuZWwpOyBib3JkZXItY29sb3I6IHZhcigtLWJvcmRlcik7IGJveC1zaGFkb3c6IDAgMTVweCAzNXB4IHJnYmEoMyw4LDU4LC42KTsgCn0KYm9keS5yZXRyby1tb2RlIC5tZW51LXRpdGxlIHsKIGNvbG9yOiB2YXIoLS1tdXRlZCk7IAp9CmJvZHkucmV0cm8tbW9kZSAuY2hpcCB7CiBiYWNrZ3JvdW5kLWNvbG9yOiAjMDcxNjlmOyBib3JkZXItY29sb3I6ICMyNzQ5ZGM7IGNvbG9yOiAjYzdmZmY3OyAKfQpib2R5LnJldHJvLW1vZGUgLmNoaXA6aG92ZXIgewogYmFja2dyb3VuZC1jb2xvcjogIzBhMWRiODsgCn0KYm9keS5yZXRyby1tb2RlIC5jaGlwLmFjdGl2ZSB7CiBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBmZmZmOyBjb2xvcjogIzA2MTM4YTsgYm9yZGVyLWNvbG9yOiAjMDBmZmZmOyAKfQpib2R5LnJldHJvLW1vZGUgI3Byb2dyZXNzQ29udGFpbmVyIHsKIGJhY2tncm91bmQ6ICMwNjE5YTk7IGJvcmRlci1jb2xvcjogIzRlNWJkNDsgY29sb3I6ICNjN2ZmZjc7IAp9CmJvZHkucmV0cm8tbW9kZSAjcHJvZ3Jlc3NDb250YWluZXIgI3NjYW5UeXBlTGluZSB7CiBjb2xvcjogI2M3ZmZmNzsgCn0KYm9keS5yZXRyby1tb2RlICNwcm9ncmVzc0NvbnRhaW5lciAjZXRyVGV4dCB7CiBjb2xvcjogI2M3ZmZmNzsgCn0KYm9keS5yZXRyby1tb2RlICN0b2tlblByb2dyZXNzQmFyIHsKIGJhY2tncm91bmQ6ICMwNjEzOGE7IGNvbG9yOiAjZmZlYTdhOyAKfQovKiBFbmhhbmNlZCBtb2RhbCBzdHlsaW5nIGZvciByZXRybyB0aGVtZSAqLwpib2R5LnJldHJvLW1vZGUgLm1vZGFsLWNvbnRlbnQgewogIGJhY2tncm91bmQ6IHZhcigtLXBhbmVsLCAjMGExZGI4KTsKICBjb2xvcjogdmFyKC0tYnRuLWZnLCAjYzdmZmY3KTsKICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXIsICM0ZTViZDQpOwogIGJveC1zaGFkb3c6IDAgMTBweCAzMHB4IHJnYmEoMywgOCwgNTgsIDAuOCk7Cn0KLyogTW9kYWwgYnV0dG9ucyBpbiByZXRybyB0aGVtZSAqLwpib2R5LnJldHJvLW1vZGUgLm1vZGFsLWFjdGlvbnMgYnV0dG9uIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1idG4tYmcsICMwYTFkYjgpOwogIGNvbG9yOiB2YXIoLS1idG4tZmcsICNjN2ZmZjcpOwogIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJvcmRlciwgIzRlNWJkNCk7CiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7Cn0KYm9keS5yZXRyby1tb2RlIC5tb2RhbC1hY3Rpb25zIGJ1dHRvbjpob3ZlciB7CiAgYmFja2dyb3VuZDogdmFyKC0tYnRuLWhvdmVyLWJnLCAjMjc0OWRjKTsKICBib3JkZXItY29sb3I6IHZhcigtLWJ0bi1ob3Zlci1ib3JkZXIsICM0ZTViZDQpOwp9CmJvZHkucmV0cm8tbW9kZSAubW9kYWwtYWN0aW9ucyBidXR0b24uc2Vjb25kYXJ5IHsKICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICBjb2xvcjogdmFyKC0tbXV0ZWQsICM4YWI0ZmYpOwp9Ci8qIE1vZGFsIHRleHQgZWxlbWVudHMgaW4gcmV0cm8gdGhlbWUgKi8KYm9keS5yZXRyby1tb2RlIC5tb2RhbC1jb250ZW50IGgzIHsKICBjb2xvcjogdmFyKC0tYnRuLWZnLCAjYzdmZmY3KTsKICBmb250LWZhbWlseTogaW5oZXJpdDsKfQpib2R5LnJldHJvLW1vZGUgLm1vZGFsLWNvbnRlbnQgcCB7CiAgY29sb3I6IHZhcigtLWJ0bi1mZywgI2M3ZmZmNyk7CiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7Cn0KLyogRW5zdXJlIEFMTCBlbGVtZW50cyBpbnNpZGUgcHJvZ3Jlc3NDb250YWluZXIgaGF2ZSBtYXRjaGluZyBiYWNrZ3JvdW5kICovCmJvZHkucmV0cm8tbW9kZSAjcHJvZ3Jlc3NDb250YWluZXIgKiB7CiAgYmFja2dyb3VuZDogIzA2MTlhOSAhaW1wb3J0YW50OyAvKiBmb3JjZSBzYW1lIGFzIHByb2dyZXNzQ29udGFpbmVyICovCn0KYm9keS5yZXRyby1tb2RlICN0b2tlblByb2dyZXNzVGV4dCwKYm9keS5yZXRyby1tb2RlICNhZGRyZXNzUHJvZ3Jlc3NUZXh0LApib2R5LnJldHJvLW1vZGUgI2FkZHJlc3NQcm9ncmVzc0NvbnRhaW5lciwKYm9keS5yZXRyby1tb2RlICN0b2tlblByb2dyZXNzQ29udGFpbmVyLApib2R5LnJldHJvLW1vZGUgI3NjYW5UeXBlTGluZSwKYm9keS5yZXRyby1tb2RlICNldHJUZXh0LApib2R5LnJldHJvLW1vZGUgI3JwY1N0YXR1cyB7CiAgYmFja2dyb3VuZDogIzA2MTlhOSAhaW1wb3J0YW50OyAvKiBzYW1lIGFzIHByb2dyZXNzQ29udGFpbmVyICovCn0KLyogUmVtb3ZlIGJvcmRlcnMgZnJvbSBwcm9ncmVzcyB0ZXh0IGVsZW1lbnRzICovCmJvZHkucmV0cm8tbW9kZSAjdG9rZW5Qcm9ncmVzc1RleHQsCmJvZHkucmV0cm8tbW9kZSAjYWRkcmVzc1Byb2dyZXNzVGV4dCwKYm9keS5yZXRyby1tb2RlICNycGNTdGF0dXMgewogIGJvcmRlcjogbm9uZSAhaW1wb3J0YW50Owp9CmJvZHkucmV0cm8tbW9kZSAuc2l0ZS1mb290ZXIgewogYm9yZGVyLXRvcC1jb2xvcjogIzI3NDlkYzsgY29sb3I6ICNiZmU5ZmY7IAp9CmJvZHkucmV0cm8tbW9kZSAubWFya2Rvd24tYm9keSBwcmUgewogYmFja2dyb3VuZDogIzA1MTM4YTsgY29sb3I6ICNjN2ZmZjc7IAp9CmJvZHkucmV0cm8tbW9kZSAudGFidWxhdG9yIHsKIGJhY2tncm91bmQtY29sb3I6ICMwNTEzOTk7IGNvbG9yOiAjYzdmZmY3OyAKfQpib2R5LnJldHJvLW1vZGUgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciB7CiBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wYW5lbCk7IGNvbG9yOiAjYzdmZmY3OyBib3JkZXItY29sb3I6IHZhcigtLWJvcmRlcik7IAp9CmJvZHkucmV0cm8tbW9kZSAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIHsKIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBjb2xvcjogI2M3ZmZmNzsgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgdmFyKC0tYm9yZGVyKTsgCn0KYm9keS5yZXRyby1tb2RlIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2w6bGFzdC1jaGlsZCB7CiBib3JkZXItcmlnaHQ6IG5vbmU7IAp9CmJvZHkucmV0cm8tbW9kZSAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItY29sLXRpdGxlIHsKIGNvbG9yOiAjYzdmZmY3OyBmb250LXdlaWdodDogNjAwOyAKfQpib2R5LnJldHJvLW1vZGUgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGU6aG92ZXIgewogYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwwLjA4KTsgCn0KYm9keS5yZXRyby1tb2RlIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC1zb3J0ZWQgewogYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwwLjEwKTsgCn0KYm9keS5yZXRyby1tb2RlIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1zb3J0ZXIgLnRhYnVsYXRvci1zb3J0ZXItZWxlbWVudCB7CiBib3JkZXItYm90dG9tLWNvbG9yOiAjYmZlOWZmOyAKfQpib2R5LnJldHJvLW1vZGUgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbFthcmlhLXNvcnQ9ImRlc2MiXSAudGFidWxhdG9yLXNvcnRlciAudGFidWxhdG9yLXNvcnRlci1lbGVtZW50IHsKIGJvcmRlci10b3AtY29sb3I6ICNiZmU5ZmY7IAp9CmJvZHkucmV0cm8tbW9kZSAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItaGVhZGVyLWZpbHRlciBzZWxlY3QgewogYmFja2dyb3VuZDogIzA2MTM4YTsgY29sb3I6ICNjN2ZmZjc7IGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJvcmRlcik7IGJvcmRlci1yYWRpdXM6IDhweDsgCn0KYm9keS5yZXRyby1tb2RlIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1oZWFkZXItZmlsdGVyIGlucHV0OjpwbGFjZWhvbGRlciB7CiBjb2xvcjogIzliYzBmZjsgCn0KYm9keS5yZXRyby1tb2RlIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1jZWxsIHsKIGJhY2tncm91bmQtY29sb3I6ICMwNTEzOTk7IGNvbG9yOiAjYzdmZmY3OyBib3JkZXItY29sb3I6ICMyNzQ5ZGM7IAp9CmJvZHkucmV0cm8tbW9kZSAudGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIHsKIGJhY2tncm91bmQtY29sb3I6ICMwYTFkYjg7IGNvbG9yOiAjYzdmZmY3OyBib3JkZXItY29sb3I6IHZhcigtLWJvcmRlcik7IAp9CmJvZHkucmV0cm8tbW9kZSB7CiBjb2xvci1zY2hlbWU6IGRhcms7IAp9CmJvZHkucmV0cm8tbW9kZSAjc3Rha2VSZWd1bGFyUGVyQWRkcmVzc1N1bW1hcnkgewogY29sb3I6ICNiZmU5ZmY7IAp9CmJvZHkucmV0cm8tbW9kZSAjbW9iaWxlLXRvb2x0aXAgewogYmFja2dyb3VuZDojMDYxMzhhOyBjb2xvcjojYzdmZmY3OyBib3JkZXItY29sb3I6IzRlNWJkNDsgCn0KYm9keS5yZXRyby1tb2RlICNyZXNldERiU2VsZWN0LCBib2R5LnJldHJvLW1vZGUgI21pbnRBY3Rpb24gewogIGJhY2tncm91bmQ6IHZhcigtLWlucHV0LWJnLCAjMDYxMzhhKTsKICBjb2xvcjogI2M3ZmZmNzsKICBib3JkZXItY29sb3I6IHZhcigtLWJvcmRlcik7Cn0KYm9keS5yZXRyby1tb2RlICNyZXNldERiU2VsZWN0IG9wdGlvbiwgYm9keS5yZXRyby1tb2RlICNtaW50QWN0aW9uIG9wdGlvbiB7CiAgYmFja2dyb3VuZDogIzA2MTM4YTsKICBjb2xvcjogI2M3ZmZmNzsKfQpib2R5LnJldHJvLW1vZGUgI3N1bW1hcnlDb250YWluZXIgewogIGJhY2tncm91bmQtY29sb3I6ICMwNjE5YTk7CiAgYm9yZGVyLWNvbG9yOiAjNGU1YmQ0OwogIGNvbG9yOiAjYzdmZmY3Owp9CmJvZHkucmV0cm8tbW9kZSB7CiAtLWlucHV0LWJnOiAjMDYxMzhhOyAKfQpib2R5LnJldHJvLW1vZGUgI3RhYi1zZXR0aW5ncyAuZmllbGQgc2VsZWN0IHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1pbnB1dC1iZyk7Cn0KYm9keS5yZXRyby1tb2RlICN0YWItc2V0dGluZ3MgLnNldHRpbmdzLWNhcmQuZGFuZ2VyIHsKIGJhY2tncm91bmQ6IHZhcigtLWlucHV0LWJnKTsgCn0KLyogRW5zdXJlIGRhbmdlciBjYXJkIHRpdGxlIGlzIHZpc2libGUgaW4gcmV0cm8gbW9kZSAqLwpib2R5LnJldHJvLW1vZGUgLnNldHRpbmdzLWNhcmQuZGFuZ2VyIGgzIHsKICBjb2xvcjogI2ZmN2E3YTsgLyogYnJpZ2h0IHJlZCBmb3IgcmV0cm8gdGhlbWUgKi8KfQovKiBFbnN1cmUgYnV0dG9uLWxpa2UgZWxlbWVudHMgdXNlIGNvcnJlY3QgdGhlbWUgY29sb3JzICovCmJvZHkucmV0cm8tbW9kZSAuYnV0dG9uLWxpa2UgewogIGJhY2tncm91bmQ6IHZhcigtLWJ0bi1iZywgIzBhMWRiOCk7CiAgY29sb3I6IHZhcigtLWJ0bi1mZywgI2M3ZmZmNyk7Cn0KYm9keS5yZXRyby1tb2RlIC5idXR0b24tbGlrZTpob3ZlciB7CiAgYmFja2dyb3VuZDogdmFyKC0tYnRuLWhvdmVyLWJnLCAjMjc0OWRjKTsKICBib3JkZXItY29sb3I6IHZhcigtLWJ0bi1ob3Zlci1ib3JkZXIsICM0ZTViZDQpOwp9CmJvZHkucmV0cm8tbW9kZSAjcmVzZXREYlNlbGVjdCB7CiAgYmFja2dyb3VuZDogdmFyKC0taW5wdXQtYmcpICFpbXBvcnRhbnQ7CiAgY29sb3I6ICNjN2ZmZjcgIWltcG9ydGFudDsKICBib3JkZXItY29sb3I6IHZhcigtLWJvcmRlcikgIWltcG9ydGFudDsKfQpib2R5LnJldHJvLW1vZGUgI3N0YWtlVGVybURheXMgewogIGJhY2tncm91bmQ6IHZhcigtLWlucHV0LWJnKSAhaW1wb3J0YW50OwogIGNvbG9yOiAjYzdmZmY3ICFpbXBvcnRhbnQ7CiAgYm9yZGVyLWNvbG9yOiB2YXIoLS1ib3JkZXIpICFpbXBvcnRhbnQ7Cn0KYm9keS5yZXRyby1tb2RlIC5zcGxpdC1zY2FuIHsKIGJvcmRlci1jb2xvcjogdmFyKC0tYm9yZGVyKTsgCn0KYm9keS5yZXRyby1tb2RlIC5zcGxpdC1zY2FuIC5idG4gewogYmFja2dyb3VuZDogdmFyKC0tYnRuLWJnKTsgY29sb3I6IHZhcigtLWJ0bi1mZyk7IAp9CmJvZHkucmV0cm8tbW9kZSAuc3BsaXQtc2NhbiAuc3BsaXQtY2FyZXQgewogYm9yZGVyLWxlZnQtY29sb3I6IHZhcigtLWJvcmRlcik7IAp9CmJvZHkucmV0cm8tbW9kZSAuc3BsaXQtc2NhbiAuc2Nhbi1iYWRnZSB7CiBiYWNrZ3JvdW5kOiAjMDYxMzhhOyBjb2xvcjogI2M3ZmZmNzsgCn0KYm9keS5yZXRyby1tb2RlIC5zcGxpdC1zY2FuIC5tZW51IHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1wYW5lbCk7CiAgY29sb3I6ICNjN2ZmZjc7CiAgYm9yZGVyLWNvbG9yOiB2YXIoLS1ib3JkZXIpOwogIGJveC1zaGFkb3c6IDAgOHB4IDIwcHggcmdiYSgzLDgsNTgsMC42KTsKfQpib2R5LnJldHJvLW1vZGUgLnNwbGl0LXNjYW4gLm1lbnUgbGk6aG92ZXIgewogYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwuMDgpOyAKfQpib2R5LnJldHJvLW1vZGUgI2NhbGVuZGFyLXhlbi10b3RhbCAjZXN0WGVuVXNkIHsKICBjb2xvcjogI2I5ZmZiNjsgLyogcmV0cm8gbGltZSBvbiBibHVlICovCiAgZm9udC13ZWlnaHQ6IDYwMDsKfQoKLyogRW5zdXJlIGNvbnNpc3RlbnQgZ3JpZCBsYXlvdXQgd2l0aCBtb25vc3BhY2UgZm9udCAqLwpib2R5LnJldHJvLW1vZGUgLnNldHRpbmdzLWdyaWQgewogIGFsaWduLWl0ZW1zOiBzdGFydDsKfQpib2R5LnJldHJvLW1vZGUgLnNldHRpbmdzLWNhcmQgewogIHdpZHRoOiAxMDAlOwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7Cn0KLyogRW5zdXJlIHRleHQgZG9lc24ndCBleHBhbmQgY2FyZHMgZGlmZmVyZW50bHkgd2l0aCBtb25vc3BhY2UgZm9udCAqLwpib2R5LnJldHJvLW1vZGUgLnNldHRpbmdzLWNhcmQgcCwKYm9keS5yZXRyby1tb2RlIC5zZXR0aW5ncy1jYXJkIGxhYmVsLApib2R5LnJldHJvLW1vZGUgLnNldHRpbmdzLWNhcmQgc21hbGwgewogIHdvcmQtd3JhcDogYnJlYWstd29yZDsKICBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkOwogIGh5cGhlbnM6IGF1dG87Cn0KLyogRW5zdXJlIGZvcm0gZWxlbWVudHMgaGF2ZSBjb25zaXN0ZW50IHNpemluZyAqLwpib2R5LnJldHJvLW1vZGUgLmZpZWxkIGlucHV0W3R5cGU9InRleHQiXSwKYm9keS5yZXRyby1tb2RlIC5maWVsZCBpbnB1dFt0eXBlPSJwYXNzd29yZCJdLApib2R5LnJldHJvLW1vZGUgLmZpZWxkIGlucHV0W3R5cGU9Im51bWJlciJdLApib2R5LnJldHJvLW1vZGUgLmZpZWxkIHRleHRhcmVhLApib2R5LnJldHJvLW1vZGUgLmZpZWxkIHNlbGVjdCB7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICB3aWR0aDogMTAwJTsKICBtaW4td2lkdGg6IDA7CiAgbGluZS1oZWlnaHQ6IDEuNTsKICBmb250LXNpemU6IDAuOWVtOyAvKiBBZGp1c3QgZm9yIG1vbm9zcGFjZSBmb250ICovCn0KLyogUHJldmVudCBidXR0b24gdGV4dCBmcm9tIGV4cGFuZGluZyBjYXJkcyAqLwpib2R5LnJldHJvLW1vZGUgLmJ1dHRvbi1yb3cgYnV0dG9uLApib2R5LnJldHJvLW1vZGUgLmJ1dHRvbi1saWtlIHsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIHdoaXRlLXNwYWNlOiBub3dyYXA7Cn0KLyogRW5zdXJlIGNvbnNpc3RlbnQgZXllIGljb24gcG9zaXRpb25pbmcgd2l0aCBtb25vc3BhY2UgZm9udCAqLwpib2R5LnJldHJvLW1vZGUgLnJldmVhbC1yb3cgewogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDsKICBtYXJnaW4tdG9wOiA0cHg7CiAgbGluZS1oZWlnaHQ6IDE7Cn0KYm9keS5yZXRyby1tb2RlIC5yZXZlYWwtYnRuIHsKICBwYWRkaW5nOiAycHg7CiAgY29sb3I6IHZhcigtLW11dGVkLCAjOGFiNGZmKTsKICBmb250LXNpemU6IGluaGVyaXQ7Cn0KYm9keS5yZXRyby1tb2RlIC5pbnB1dC13aXRoLXRvZ2dsZSB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICB3aWR0aDogMTAwJTsKfQovKiBFbnN1cmUgY29udGVudCBpcyBsZWZ0LWFsaWduZWQgbGlrZSBpbiBsaWdodCBtb2RlICovCmJvZHkucmV0cm8tbW9kZSAuc2V0dGluZ3MtY2FyZCB7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQpib2R5LnJldHJvLW1vZGUgLnNldHRpbmdzLWNhcmQgaDMsCmJvZHkucmV0cm8tbW9kZSAuc2V0dGluZ3MtY2FyZCBwLApib2R5LnJldHJvLW1vZGUgLnNldHRpbmdzLWNhcmQgbGFiZWwsCmJvZHkucmV0cm8tbW9kZSAuZmllbGQgewogIHRleHQtYWxpZ246IGxlZnQ7Cn0KLyogRW5zdXJlIGJ1dHRvbnMgYXJlIGxlZnQtYWxpZ25lZCAqLwpib2R5LnJldHJvLW1vZGUgLnNldHRpbmdzLWNhcmQgLmJ1dHRvbi1yb3csCmJvZHkucmV0cm8tbW9kZSAuc2V0dGluZ3MtY2FyZCBidXR0b24sCmJvZHkucmV0cm8tbW9kZSAuc2V0dGluZ3MtY2FyZCAuYnV0dG9uLWxpa2UgewogIHRleHQtYWxpZ246IGxlZnQ7Cn0KYm9keS5yZXRyby1tb2RlIC5zZXR0aW5ncy1jYXJkIC5idXR0b24tcm93IHsKICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7Cn0KCi8qIEZsYXRwaWNrciBjYWxlbmRhciBzdHlsaW5nIGZvciByZXRybyB0aGVtZSAqLwpib2R5LnJldHJvLW1vZGUgLmZsYXRwaWNrci1jYWxlbmRhciB7CiAgYmFja2dyb3VuZDogdmFyKC0tcGFuZWwsICMwYTFkYjgpOwogIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJvcmRlciwgIzRlNWJkNCk7CiAgYm94LXNoYWRvdzogMCAxNXB4IDM1cHggcmdiYSgzLCA4LCA1OCwgMC42KTsKICBib3JkZXItcmFkaXVzOiA4cHg7Cn0KCmJvZHkucmV0cm8tbW9kZSAuZmxhdHBpY2tyLW1vbnRocyB7CiAgYmFja2dyb3VuZDogdmFyKC0tcGFuZWwsICMwYTFkYjgpOwogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1ib3JkZXIsICM0ZTViZDQpOwp9Cgpib2R5LnJldHJvLW1vZGUgLmZsYXRwaWNrci1jdXJyZW50LW1vbnRoIHsKICBjb2xvcjogdmFyKC0tYnRuLWZnLCAjYzdmZmY3KTsKICBmb250LWZhbWlseTogaW5oZXJpdDsKfQoKYm9keS5yZXRyby1tb2RlIC5mbGF0cGlja3ItY3VycmVudC1tb250aCAubnVtSW5wdXRXcmFwcGVyIHsKICBjb2xvcjogdmFyKC0tYnRuLWZnLCAjYzdmZmY3KTsKfQoKYm9keS5yZXRyby1tb2RlIC5mbGF0cGlja3ItY3VycmVudC1tb250aCBpbnB1dCB7CiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgY29sb3I6IHZhcigtLWJ0bi1mZywgI2M3ZmZmNyk7CiAgYm9yZGVyOiBub25lOwogIGZvbnQtZmFtaWx5OiBpbmhlcml0Owp9Cgpib2R5LnJldHJvLW1vZGUgLmZsYXRwaWNrci13ZWVrZGF5cyB7CiAgYmFja2dyb3VuZDogdmFyKC0taW5wdXQtYmcsICMwNjEzOGEpOwogIGNvbG9yOiB2YXIoLS1tdXRlZCwgIzhhYjRmZik7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLWJvcmRlciwgIzRlNWJkNCk7Cn0KCmJvZHkucmV0cm8tbW9kZSAuZmxhdHBpY2tyLXdlZWtkYXkgewogIGNvbG9yOiB2YXIoLS1tdXRlZCwgIzhhYjRmZik7CiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7CiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKICBmb250LXdlaWdodDogNjAwOwp9Cgpib2R5LnJldHJvLW1vZGUgLmZsYXRwaWNrci1kYXlzIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1pbnB1dC1iZywgIzA2MTM4YSk7Cn0KCmJvZHkucmV0cm8tbW9kZSAuZmxhdHBpY2tyLWRheSB7CiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgY29sb3I6IHZhcigtLWJ0bi1mZywgI2M3ZmZmNyk7CiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7CiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7Cn0KCmJvZHkucmV0cm8tbW9kZSAuZmxhdHBpY2tyLWRheTpob3ZlciB7CiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KTsKICBib3JkZXItY29sb3I6IHZhcigtLWJvcmRlciwgIzRlNWJkNCk7Cn0KCmJvZHkucmV0cm8tbW9kZSAuZmxhdHBpY2tyLWRheS5zZWxlY3RlZCB7CiAgYmFja2dyb3VuZDogdmFyKC0tYm9yZGVyLCAjNGU1YmQ0KTsKICBjb2xvcjogdmFyKC0tYnRuLWZnLCAjYzdmZmY3KTsKICBib3JkZXItY29sb3I6IHZhcigtLWJvcmRlciwgIzRlNWJkNCk7CiAgZm9udC13ZWlnaHQ6IDcwMDsKfQoKYm9keS5yZXRyby1tb2RlIC5mbGF0cGlja3ItZGF5LnRvZGF5IHsKICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDI1NSwgMjU1LCAwLjIpOwogIGNvbG9yOiAjMDBmZmZmOwogIGJvcmRlci1jb2xvcjogIzAwZmZmZjsKICBmb250LXdlaWdodDogNjAwOwp9Cgpib2R5LnJldHJvLW1vZGUgLmZsYXRwaWNrci1kYXkucHJldk1vbnRoRGF5LApib2R5LnJldHJvLW1vZGUgLmZsYXRwaWNrci1kYXkubmV4dE1vbnRoRGF5IHsKICBjb2xvcjogdmFyKC0tbXV0ZWQsICM4YWI0ZmYpOwogIG9wYWNpdHk6IDAuNjsKfQoKYm9keS5yZXRyby1tb2RlIC5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItbW9udGggewogIGNvbG9yOiB2YXIoLS1idG4tZmcsICNjN2ZmZjcpOwp9Cgpib2R5LnJldHJvLW1vZGUgLmZsYXRwaWNrci1tb250aHMgLmZsYXRwaWNrci1wcmV2LW1vbnRoLApib2R5LnJldHJvLW1vZGUgLmZsYXRwaWNrci1tb250aHMgLmZsYXRwaWNrci1uZXh0LW1vbnRoIHsKICBjb2xvcjogdmFyKC0tYnRuLWZnLCAjYzdmZmY3KTsKICBmaWxsOiB2YXIoLS1idG4tZmcsICNjN2ZmZjcpOwp9Cgpib2R5LnJldHJvLW1vZGUgLmZsYXRwaWNrci1tb250aHMgLmZsYXRwaWNrci1wcmV2LW1vbnRoOmhvdmVyLApib2R5LnJldHJvLW1vZGUgLmZsYXRwaWNrci1tb250aHMgLmZsYXRwaWNrci1uZXh0LW1vbnRoOmhvdmVyIHsKICBjb2xvcjogdmFyKC0tYm9yZGVyLCAjNGU1YmQ0KTsKICBmaWxsOiB2YXIoLS1ib3JkZXIsICM0ZTViZDQpOwp9Cgpib2R5LnJldHJvLW1vZGUgLmZsYXRwaWNrci10b2RheS1idG4gewogIGJhY2tncm91bmQ6IHZhcigtLWJ0bi1iZywgIzBhMWRiOCk7CiAgY29sb3I6IHZhcigtLWJ0bi1mZywgI2M3ZmZmNyk7CiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLCAjNGU1YmQ0KTsKICBmb250LWZhbWlseTogaW5oZXJpdDsKICBib3JkZXItcmFkaXVzOiA2cHg7Cn0KCmJvZHkucmV0cm8tbW9kZSAuZmxhdHBpY2tyLXRvZGF5LWJ0bjpob3ZlciB7CiAgYmFja2dyb3VuZDogdmFyKC0tYnRuLWhvdmVyLWJnLCAjMjc0OWRjKTsKICBib3JkZXItY29sb3I6IHZhcigtLWJ0bi1ob3Zlci1ib3JkZXIsICM0ZTViZDQpOwp9',
            'js/app-mint.js': '',
        'js/app.js': '',
        'js/unify.js': '',
        'js/xen-stake.js': '',
        'js/xenft-stake.js': '',
        'js/xenft.js': '',
            'ABI/cointool-ABI.js': 'Y29uc3QgY29pbnRvb2xBYmkgPSBbeyJpbnB1dHMiOltdLCJzdGF0ZU11dGFiaWxpdHkiOiJwYXlhYmxlIiwidHlwZSI6ImNvbnN0cnVjdG9yIn0seyJzdGF0ZU11dGFiaWxpdHkiOiJwYXlhYmxlIiwidHlwZSI6ImZhbGxiYWNrIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoiYSIsInR5cGUiOiJhZGRyZXNzIn0seyJpbnRlcm5hbFR5cGUiOiJieXRlcyIsIm5hbWUiOiJkYXRhIiwidHlwZSI6ImJ5dGVzIn1dLCJuYW1lIjoiYyIsIm91dHB1dHMiOltdLCJzdGF0ZU11dGFiaWxpdHkiOiJwYXlhYmxlIiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoiYSIsInR5cGUiOiJhZGRyZXNzIn0seyJpbnRlcm5hbFR5cGUiOiJieXRlcyIsIm5hbWUiOiJkYXRhIiwidHlwZSI6ImJ5dGVzIn1dLCJuYW1lIjoiY0tpbGwiLCJvdXRwdXRzIjpbXSwic3RhdGVNdXRhYmlsaXR5IjoicGF5YWJsZSIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6Il90b2tlbiIsInR5cGUiOiJhZGRyZXNzIn1dLCJuYW1lIjoiY2xhaW1Ub2tlbnMiLCJvdXRwdXRzIjpbXSwic3RhdGVNdXRhYmlsaXR5Ijoibm9ucGF5YWJsZSIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6ImEiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsiaW50ZXJuYWxUeXBlIjoiYnl0ZXMiLCJuYW1lIjoiZGF0YSIsInR5cGUiOiJieXRlcyJ9XSwibmFtZSI6ImQiLCJvdXRwdXRzIjpbXSwic3RhdGVNdXRhYmlsaXR5IjoicGF5YWJsZSIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6ImEiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsiaW50ZXJuYWxUeXBlIjoiYnl0ZXMiLCJuYW1lIjoiZGF0YSIsInR5cGUiOiJieXRlcyJ9XSwibmFtZSI6ImRLaWxsIiwib3V0cHV0cyI6W10sInN0YXRlTXV0YWJpbGl0eSI6InBheWFibGUiLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoidWludDI1NltdIiwibmFtZSI6ImEiLCJ0eXBlIjoidWludDI1NltdIn0seyJpbnRlcm5hbFR5cGUiOiJieXRlcyIsIm5hbWUiOiJkYXRhIiwidHlwZSI6ImJ5dGVzIn0seyJpbnRlcm5hbFR5cGUiOiJieXRlcyIsIm5hbWUiOiJfc2FsdCIsInR5cGUiOiJieXRlcyJ9XSwibmFtZSI6ImYiLCJvdXRwdXRzIjpbXSwic3RhdGVNdXRhYmlsaXR5IjoicGF5YWJsZSIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbXSwibmFtZSI6ImsiLCJvdXRwdXRzIjpbXSwic3RhdGVNdXRhYmlsaXR5Ijoibm9ucGF5YWJsZSIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6IiIsInR5cGUiOiJhZGRyZXNzIn0seyJpbnRlcm5hbFR5cGUiOiJieXRlcyIsIm5hbWUiOiIiLCJ0eXBlIjoiYnl0ZXMifV0sIm5hbWUiOiJtYXAiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoidG90YWwiLCJ0eXBlIjoidWludDI1NiJ9LHsiaW50ZXJuYWxUeXBlIjoiYnl0ZXMiLCJuYW1lIjoiZGF0YSIsInR5cGUiOiJieXRlcyJ9LHsiaW50ZXJuYWxUeXBlIjoiYnl0ZXMiLCJuYW1lIjoiX3NhbHQiLCJ0eXBlIjoiYnl0ZXMifV0sIm5hbWUiOiJ0Iiwib3V0cHV0cyI6W10sInN0YXRlTXV0YWJpbGl0eSI6InBheWFibGUiLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoidWludDI1NltdIiwibmFtZSI6ImEiLCJ0eXBlIjoidWludDI1NltdIn0seyJpbnRlcm5hbFR5cGUiOiJieXRlcyIsIm5hbWUiOiJkYXRhIiwidHlwZSI6ImJ5dGVzIn0seyJpbnRlcm5hbFR5cGUiOiJieXRlcyIsIm5hbWUiOiJfc2FsdCIsInR5cGUiOiJieXRlcyJ9XSwibmFtZSI6InRfIiwib3V0cHV0cyI6W10sInN0YXRlTXV0YWJpbGl0eSI6InBheWFibGUiLCJ0eXBlIjoiZnVuY3Rpb24ifSx7InN0YXRlTXV0YWJpbGl0eSI6InBheWFibGUiLCJ0eXBlIjoicmVjZWl2ZSJ9XTsK',
        'ABI/xen-ABI.js': '',
        'ABI/xenft-ABI.js': '',
        'ABI/xenft-stake-ABI.js': 'Ly8gRnVsbCBTdGFrZSBYRU5GVCBFUkMtNzIxIEFCSSAoMHhmRWRBMDNiOTE1MTREMzFiNDM1ZDRFMTUxOUZkOWU2OTlDMjlCYkZDKQovLyBFeHBvc2VzOiB3aW5kb3cueGVuZnRTdGFrZUFiaQp3aW5kb3cueGVuZnRTdGFrZUFiaSA9IFt7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoiYWRkcmVzcyIsIm5hbWUiOiJ4ZW5DcnlwdG9fIiwidHlwZSI6ImFkZHJlc3MifSx7ImludGVybmFsVHlwZSI6InVpbnQyNTZbXSIsIm5hbWUiOiJidXJuUmF0ZXNfIiwidHlwZSI6InVpbnQyNTZbXSJ9LHsiaW50ZXJuYWxUeXBlIjoidWludDI1NltdIiwibmFtZSI6InRva2VuTGltaXRzXyIsInR5cGUiOiJ1aW50MjU2W10ifSx7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoic3RhcnRCbG9ja051bWJlcl8iLCJ0eXBlIjoidWludDI1NiJ9LHsiaW50ZXJuYWxUeXBlIjoiYWRkcmVzcyIsIm5hbWUiOiJmb3J3YXJkZXJfIiwidHlwZSI6ImFkZHJlc3MifSx7ImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoicm95YWx0eVJlY2VpdmVyXyIsInR5cGUiOiJhZGRyZXNzIn1dLCJzdGF0ZU11dGFiaWxpdHkiOiJub25wYXlhYmxlIiwidHlwZSI6ImNvbnN0cnVjdG9yIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoib3BlcmF0b3IiLCJ0eXBlIjoiYWRkcmVzcyJ9XSwibmFtZSI6Ik9wZXJhdG9yTm90QWxsb3dlZCIsInR5cGUiOiJlcnJvciJ9LHsiYW5vbnltb3VzIjpmYWxzZSwiaW5wdXRzIjpbeyJpbmRleGVkIjp0cnVlLCJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6Im93bmVyIiwidHlwZSI6ImFkZHJlc3MifSx7ImluZGV4ZWQiOnRydWUsImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoiYXBwcm92ZWQiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsiaW5kZXhlZCI6dHJ1ZSwiaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiJ0b2tlbklkIiwidHlwZSI6InVpbnQyNTYifV0sIm5hbWUiOiJBcHByb3ZhbCIsInR5cGUiOiJldmVudCJ9LHsiYW5vbnltb3VzIjpmYWxzZSwiaW5wdXRzIjpbeyJpbmRleGVkIjp0cnVlLCJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6Im93bmVyIiwidHlwZSI6ImFkZHJlc3MifSx7ImluZGV4ZWQiOnRydWUsImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoib3BlcmF0b3IiLCJ0eXBlIjoiYWRkcmVzcyJ9LHsiaW5kZXhlZCI6ZmFsc2UsImludGVybmFsVHlwZSI6ImJvb2wiLCJuYW1lIjoiYXBwcm92ZWQiLCJ0eXBlIjoiYm9vbCJ9XSwibmFtZSI6IkFwcHJvdmFsRm9yQWxsIiwidHlwZSI6ImV2ZW50In0seyJhbm9ueW1vdXMiOmZhbHNlLCJpbnB1dHMiOlt7ImluZGV4ZWQiOnRydWUsImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoidXNlciIsInR5cGUiOiJhZGRyZXNzIn0seyJpbmRleGVkIjpmYWxzZSwiaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiJ0b2tlbklkIiwidHlwZSI6InVpbnQyNTYifSx7ImluZGV4ZWQiOmZhbHNlLCJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6InRvIiwidHlwZSI6ImFkZHJlc3MifV0sIm5hbWUiOiJFbmRUb3JyZW50IiwidHlwZSI6ImV2ZW50In0seyJhbm9ueW1vdXMiOmZhbHNlLCJpbnB1dHMiOlt7ImluZGV4ZWQiOnRydWUsImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoidXNlciIsInR5cGUiOiJhZGRyZXNzIn0seyJpbmRleGVkIjp0cnVlLCJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6InhlbkNvbnRyYWN0IiwidHlwZSI6ImFkZHJlc3MifSx7ImluZGV4ZWQiOnRydWUsImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoidG9rZW5Db250cmFjdCIsInR5cGUiOiJhZGRyZXNzIn0seyJpbmRleGVkIjpmYWxzZSwiaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiJ4ZW5BbW91bnQiLCJ0eXBlIjoidWludDI1NiJ9LHsiaW5kZXhlZCI6ZmFsc2UsImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoidG9rZW5BbW91bnQiLCJ0eXBlIjoidWludDI1NiJ9XSwibmFtZSI6IlJlZGVlbWVkIiwidHlwZSI6ImV2ZW50In0seyJhbm9ueW1vdXMiOmZhbHNlLCJpbnB1dHMiOlt7ImluZGV4ZWQiOnRydWUsImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoidXNlciIsInR5cGUiOiJhZGRyZXNzIn0seyJpbmRleGVkIjpmYWxzZSwiaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiJjb3VudCIsInR5cGUiOiJ1aW50MjU2In0seyJpbmRleGVkIjpmYWxzZSwiaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiJ0ZXJtIiwidHlwZSI6InVpbnQyNTYifV0sIm5hbWUiOiJTdGFydFRvcnJlbnQiLCJ0eXBlIjoiZXZlbnQifSx7ImFub255bW91cyI6ZmFsc2UsImlucHV0cyI6W3siaW5kZXhlZCI6dHJ1ZSwiaW50ZXJuYWxUeXBlIjoiYWRkcmVzcyIsIm5hbWUiOiJmcm9tIiwidHlwZSI6ImFkZHJlc3MifSx7ImluZGV4ZWQiOnRydWUsImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoidG8iLCJ0eXBlIjoiYWRkcmVzcyJ9LHsiaW5kZXhlZCI6dHJ1ZSwiaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiJ0b2tlbklkIiwidHlwZSI6InVpbnQyNTYifV0sIm5hbWUiOiJUcmFuc2ZlciIsInR5cGUiOiJldmVudCJ9LHsiaW5wdXRzIjpbXSwibmFtZSI6IkFVVEhPUlMiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJzdHJpbmciLCJuYW1lIjoiIiwidHlwZSI6InN0cmluZyJ9XSwic3RhdGVNdXRhYmlsaXR5IjoidmlldyIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbXSwibmFtZSI6IkJMQUNLT1VUX1RFUk0iLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOltdLCJuYW1lIjoiQ09NTU9OX0NBVEVHT1JZX0NPVU5URVIiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOltdLCJuYW1lIjoiTElNSVRFRF9DQVRFR09SWV9USU1FX1RIUkVTSE9MRCIsIm91dHB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTYifV0sInN0YXRlTXV0YWJpbGl0eSI6InZpZXciLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W10sIm5hbWUiOiJPUEVSQVRPUl9GSUxURVJfUkVHSVNUUlkiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJjb250cmFjdCBJT3BlcmF0b3JGaWx0ZXJSZWdpc3RyeSIsIm5hbWUiOiIiLCJ0eXBlIjoiYWRkcmVzcyJ9XSwic3RhdGVNdXRhYmlsaXR5IjoidmlldyIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbXSwibmFtZSI6IlBPV0VSX0dST1VQX1NJWkUiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOltdLCJuYW1lIjoiUk9ZQUxUWV9CUCIsIm91dHB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTYifV0sInN0YXRlTXV0YWJpbGl0eSI6InZpZXciLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W10sIm5hbWUiOiJTUEVDSUFMX0NBVEVHT1JJRVNfVk1VX1RIUkVTSE9MRCIsIm91dHB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTYifV0sInN0YXRlTXV0YWJpbGl0eSI6InZpZXciLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoiYWRkcmVzcyIsIm5hbWUiOiJ0cnVzdGVkRm9yd2FyZGVyIiwidHlwZSI6ImFkZHJlc3MifV0sIm5hbWUiOiJhZGRGb3J3YXJkZXIiLCJvdXRwdXRzIjpbXSwic3RhdGVNdXRhYmlsaXR5Ijoibm9ucGF5YWJsZSIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6Im9wZXJhdG9yIiwidHlwZSI6ImFkZHJlc3MifSx7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoidG9rZW5JZCIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoiYXBwcm92ZSIsIm91dHB1dHMiOltdLCJzdGF0ZU11dGFiaWxpdHkiOiJub25wYXlhYmxlIiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoib3duZXIiLCJ0eXBlIjoiYWRkcmVzcyJ9XSwibmFtZSI6ImJhbGFuY2VPZiIsIm91dHB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTYifV0sInN0YXRlTXV0YWJpbGl0eSI6InZpZXciLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiJ0b2tlbklkIiwidHlwZSI6InVpbnQyNTYifSx7ImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoidG8iLCJ0eXBlIjoiYWRkcmVzcyJ9XSwibmFtZSI6ImJ1bGtDbGFpbU1pbnRSZXdhcmQiLCJvdXRwdXRzIjpbXSwic3RhdGVNdXRhYmlsaXR5Ijoibm9ucGF5YWJsZSIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6ImNvdW50IiwidHlwZSI6InVpbnQyNTYifSx7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoidGVybSIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoiYnVsa0NsYWltUmFuayIsIm91dHB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoidG9rZW5JZCIsInR5cGUiOiJ1aW50MjU2In1dLCJzdGF0ZU11dGFiaWxpdHkiOiJub25wYXlhYmxlIiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoiY291bnQiLCJ0eXBlIjoidWludDI1NiJ9LHsiaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiJ0ZXJtIiwidHlwZSI6InVpbnQyNTYifSx7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoiYnVybmluZyIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoiYnVsa0NsYWltUmFua0xpbWl0ZWQiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJzdGF0ZU11dGFiaWxpdHkiOiJub25wYXlhYmxlIiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoidXNlciIsInR5cGUiOiJhZGRyZXNzIn0seyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6InRva2VuSWQiLCJ0eXBlIjoidWludDI1NiJ9XSwibmFtZSI6ImJ1cm4iLCJvdXRwdXRzIjpbXSwic3RhdGVNdXRhYmlsaXR5Ijoibm9ucGF5YWJsZSIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6InRvIiwidHlwZSI6ImFkZHJlc3MifV0sIm5hbWUiOiJjYWxsQ2xhaW1NaW50UmV3YXJkIiwib3V0cHV0cyI6W10sInN0YXRlTXV0YWJpbGl0eSI6Im5vbnBheWFibGUiLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiJ0ZXJtIiwidHlwZSI6InVpbnQyNTYifV0sIm5hbWUiOiJjYWxsQ2xhaW1SYW5rIiwib3V0cHV0cyI6W10sInN0YXRlTXV0YWJpbGl0eSI6Im5vbnBheWFibGUiLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W10sIm5hbWUiOiJnZW5lc2lzVHMiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoidG9rZW5JZCIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoiZ2V0QXBwcm92ZWQiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6IiIsInR5cGUiOiJhZGRyZXNzIn1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoidG9rZW5JZCIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoiaXNBcGV4Iiwib3V0cHV0cyI6W3siaW50ZXJuYWxUeXBlIjoiYm9vbCIsIm5hbWUiOiJhcGV4IiwidHlwZSI6ImJvb2wifV0sInN0YXRlTXV0YWJpbGl0eSI6InB1cmUiLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoiYWRkcmVzcyIsIm5hbWUiOiJvd25lciIsInR5cGUiOiJhZGRyZXNzIn0seyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6Im9wZXJhdG9yIiwidHlwZSI6ImFkZHJlc3MifV0sIm5hbWUiOiJpc0FwcHJvdmVkRm9yQWxsIiwib3V0cHV0cyI6W3siaW50ZXJuYWxUeXBlIjoiYm9vbCIsIm5hbWUiOiIiLCJ0eXBlIjoiYm9vbCJ9XSwic3RhdGVNdXRhYmlsaXR5IjoidmlldyIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6ImZvcndhcmRlciIsInR5cGUiOiJhZGRyZXNzIn1dLCJuYW1lIjoiaXNUcnVzdGVkRm9yd2FyZGVyIiwib3V0cHV0cyI6W3siaW50ZXJuYWxUeXBlIjoiYm9vbCIsIm5hbWUiOiIiLCJ0eXBlIjoiYm9vbCJ9XSwic3RhdGVNdXRhYmlsaXR5IjoidmlldyIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoibWludEluZm8iLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOltdLCJuYW1lIjoibmFtZSIsIm91dHB1dHMiOlt7ImludGVybmFsVHlwZSI6InN0cmluZyIsIm5hbWUiOiIiLCJ0eXBlIjoic3RyaW5nIn1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6ImFkZHJlc3MiLCJuYW1lIjoidXNlciIsInR5cGUiOiJhZGRyZXNzIn0seyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6ImJ1cm5lZCIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoib25Ub2tlbkJ1cm5lZCIsIm91dHB1dHMiOltdLCJzdGF0ZU11dGFiaWxpdHkiOiJub25wYXlhYmxlIiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOltdLCJuYW1lIjoib3duZWRUb2tlbnMiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2W10iLCJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTZbXSJ9XSwic3RhdGVNdXRhYmlsaXR5IjoidmlldyIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbXSwibmFtZSI6Im93bmVyIiwib3V0cHV0cyI6W3siaW50ZXJuYWxUeXBlIjoiYWRkcmVzcyIsIm5hbWUiOiIiLCJ0eXBlIjoiYWRkcmVzcyJ9XSwic3RhdGVNdXRhYmlsaXR5IjoidmlldyIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6InRva2VuSWQiLCJ0eXBlIjoidWludDI1NiJ9XSwibmFtZSI6Im93bmVyT2YiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6IiIsInR5cGUiOiJhZGRyZXNzIn1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOltdLCJuYW1lIjoicG93ZXJEb3duIiwib3V0cHV0cyI6W10sInN0YXRlTXV0YWJpbGl0eSI6Im5vbnBheWFibGUiLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiIiLCJ0eXBlIjoidWludDI1NiJ9LHsiaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiJzYWxlUHJpY2UiLCJ0eXBlIjoidWludDI1NiJ9XSwibmFtZSI6InJveWFsdHlJbmZvIiwib3V0cHV0cyI6W3siaW50ZXJuYWxUeXBlIjoiYWRkcmVzcyIsIm5hbWUiOiJyZWNlaXZlciIsInR5cGUiOiJhZGRyZXNzIn0seyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6InJveWFsdHlBbW91bnQiLCJ0eXBlIjoidWludDI1NiJ9XSwic3RhdGVNdXRhYmlsaXR5IjoidmlldyIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6ImZyb20iLCJ0eXBlIjoiYWRkcmVzcyJ9LHsiaW50ZXJuYWxUeXBlIjoiYWRkcmVzcyIsIm5hbWUiOiJ0byIsInR5cGUiOiJhZGRyZXNzIn0seyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6InRva2VuSWQiLCJ0eXBlIjoidWludDI1NiJ9XSwibmFtZSI6InNhZmVUcmFuc2ZlckZyb20iLCJvdXRwdXRzIjpbXSwic3RhdGVNdXRhYmlsaXR5Ijoibm9ucGF5YWJsZSIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6ImZyb20iLCJ0eXBlIjoiYWRkcmVzcyJ9LHsiaW50ZXJuYWxUeXBlIjoiYWRkcmVzcyIsIm5hbWUiOiJ0byIsInR5cGUiOiJhZGRyZXNzIn0seyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6InRva2VuSWQiLCJ0eXBlIjoidWludDI1NiJ9LHsiaW50ZXJuYWxUeXBlIjoiYnl0ZXMiLCJuYW1lIjoiZGF0YSIsInR5cGUiOiJieXRlcyJ9XSwibmFtZSI6InNhZmVUcmFuc2ZlckZyb20iLCJvdXRwdXRzIjpbXSwic3RhdGVNdXRhYmlsaXR5Ijoibm9ucGF5YWJsZSIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6Im9wZXJhdG9yIiwidHlwZSI6ImFkZHJlc3MifSx7ImludGVybmFsVHlwZSI6ImJvb2wiLCJuYW1lIjoiYXBwcm92ZWQiLCJ0eXBlIjoiYm9vbCJ9XSwibmFtZSI6InNldEFwcHJvdmFsRm9yQWxsIiwib3V0cHV0cyI6W10sInN0YXRlTXV0YWJpbGl0eSI6Im5vbnBheWFibGUiLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiIiLCJ0eXBlIjoidWludDI1NiJ9XSwibmFtZSI6InNwZWNpYWxDbGFzc2VzQnVyblJhdGVzIiwib3V0cHV0cyI6W3siaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiIiLCJ0eXBlIjoidWludDI1NiJ9XSwic3RhdGVNdXRhYmlsaXR5IjoidmlldyIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoic3BlY2lhbENsYXNzZXNDb3VudGVycyIsIm91dHB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTYifV0sInN0YXRlTXV0YWJpbGl0eSI6InZpZXciLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiIiLCJ0eXBlIjoidWludDI1NiJ9XSwibmFtZSI6InNwZWNpYWxDbGFzc2VzVG9rZW5MaW1pdHMiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOltdLCJuYW1lIjoic3RhcnRCbG9ja051bWJlciIsIm91dHB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTYifV0sInN0YXRlTXV0YWJpbGl0eSI6InZpZXciLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoiYnl0ZXM0IiwibmFtZSI6ImludGVyZmFjZUlkIiwidHlwZSI6ImJ5dGVzNCJ9XSwibmFtZSI6InN1cHBvcnRzSW50ZXJmYWNlIiwib3V0cHV0cyI6W3siaW50ZXJuYWxUeXBlIjoiYm9vbCIsIm5hbWUiOiIiLCJ0eXBlIjoiYm9vbCJ9XSwic3RhdGVNdXRhYmlsaXR5IjoidmlldyIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbXSwibmFtZSI6InN5bWJvbCIsIm91dHB1dHMiOlt7ImludGVybmFsVHlwZSI6InN0cmluZyIsIm5hbWUiOiIiLCJ0eXBlIjoic3RyaW5nIn1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOltdLCJuYW1lIjoidG9rZW5JZENvdW50ZXIiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJzdGF0ZU11dGFiaWxpdHkiOiJ2aWV3IiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoidG9rZW5JZCIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoidG9rZW5VUkkiLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJzdHJpbmciLCJuYW1lIjoiIiwidHlwZSI6InN0cmluZyJ9XSwic3RhdGVNdXRhYmlsaXR5IjoidmlldyIsInR5cGUiOiJmdW5jdGlvbiJ9LHsiaW5wdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJhZGRyZXNzIiwibmFtZSI6ImZyb20iLCJ0eXBlIjoiYWRkcmVzcyJ9LHsiaW50ZXJuYWxUeXBlIjoiYWRkcmVzcyIsIm5hbWUiOiJ0byIsInR5cGUiOiJhZGRyZXNzIn0seyJpbnRlcm5hbFR5cGUiOiJ1aW50MjU2IiwibmFtZSI6InRva2VuSWQiLCJ0eXBlIjoidWludDI1NiJ9XSwibmFtZSI6InRyYW5zZmVyRnJvbSIsIm91dHB1dHMiOltdLCJzdGF0ZU11dGFiaWxpdHkiOiJub25wYXlhYmxlIiwidHlwZSI6ImZ1bmN0aW9uIn0seyJpbnB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTYifV0sIm5hbWUiOiJ2bXVDb3VudCIsIm91dHB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTYifV0sInN0YXRlTXV0YWJpbGl0eSI6InZpZXciLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W3siaW50ZXJuYWxUeXBlIjoidWludDI1NiIsIm5hbWUiOiIiLCJ0eXBlIjoidWludDI1NiJ9XSwibmFtZSI6InhlbkJ1cm5lZCIsIm91dHB1dHMiOlt7ImludGVybmFsVHlwZSI6InVpbnQyNTYiLCJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTYifV0sInN0YXRlTXV0YWJpbGl0eSI6InZpZXciLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W10sIm5hbWUiOiJ4ZW5DcnlwdG8iLCJvdXRwdXRzIjpbeyJpbnRlcm5hbFR5cGUiOiJjb250cmFjdCBYRU5DcnlwdG8iLCJuYW1lIjoiIiwidHlwZSI6ImFkZHJlc3MifV0sInN0YXRlTXV0YWJpbGl0eSI6InZpZXciLCJ0eXBlIjoiZnVuY3Rpb24ifV07Cg==',
    }

def get_content_type(path):
    """Get content type based on file extension"""
    # Force correct MIME types - don't rely on mimetypes module
    path_lower = path.lower()
    
    if path_lower.endswith('.css'):
        return 'text/css; charset=utf-8'
    elif path_lower.endswith('.js'):
        return 'application/javascript; charset=utf-8'
    elif path_lower.endswith('.html'):
        return 'text/html; charset=utf-8'
    elif path_lower.endswith('.json'):
        return 'application/json; charset=utf-8'
    elif path_lower.endswith('.md'):
        return 'text/markdown; charset=utf-8'
    elif path_lower.endswith('.png'):
        return 'image/png'
    elif path_lower.endswith('.jpg') or path_lower.endswith('.jpeg'):
        return 'image/jpeg'
    elif path_lower.endswith('.gif'):
        return 'image/gif'
    elif path_lower.endswith('.svg'):
        return 'image/svg+xml'
    elif path_lower.endswith('.ico'):
        return 'image/x-icon'
    elif path_lower.endswith('.woff'):
        return 'font/woff'
    elif path_lower.endswith('.woff2'):
        return 'font/woff2'
    elif path_lower.endswith('.ttf'):
        return 'font/ttf'
    else:
        return 'application/octet-stream'

def lambda_handler(event, context):
    """
    AWS Lambda handler for serving static files
    
    Handles:
    - Cache-busting query parameters (?v=123456)
    - URL fragments (#section)
    - /tracker/ base href prefix
    - Proper MIME types for CSS/JS/HTML/MD files
    - CORS headers
    """
    try:
        # Debug: log the entire event for troubleshooting
        print(f"Event: {json.dumps(event)}")
        
        # Get the path from the event - handle different API Gateway formats
        if 'rawPath' in event:
            path = event['rawPath']
        elif 'path' in event:
            path = event['path']
        elif 'pathParameters' in event and event['pathParameters'] and 'proxy' in event['pathParameters']:
            path = '/' + event['pathParameters']['proxy']
        else:
            path = '/'
        
        # Remove leading slash and decode URL
        if path.startswith('/'):
            path = path[1:]
        path = unquote(path)
        
        # Strip query parameters and fragments (cache busting like ?v=1234567890)
        if '?' in path:
            path = path.split('?')[0]
        if '#' in path:
            path = path.split('#')[0]
        
        # Handle /tracker/ prefix from base href
        if path.startswith('tracker/'):
            path = path[8:]  # Remove 'tracker/' prefix
        
        # Default to index.html for root path or empty path
        if path == '' or path == '/':
            path = 'index.html'
        
        print(f"Requested path: '{path}'")
        print(f"Available files: {list(STATIC_FILES.keys())}")
        
        # Check if file exists in our static files
        if path in STATIC_FILES:
            file_content = STATIC_FILES[path]
            content_type = get_content_type(path)
            
            print(f"Serving file: {path} with content-type: {content_type}")
            
            # Decode base64 content
            try:
                decoded_content = base64.b64decode(file_content).decode('utf-8')
                is_binary = False
            except UnicodeDecodeError:
                # Handle binary files
                decoded_content = base64.b64decode(file_content)
                is_binary = True
            
            # Prepare response headers
            headers = {
                'Content-Type': content_type,
                'Cache-Control': 'public, max-age=31536000' if path.startswith(('css/', 'js/', 'ABI/')) else 'public, max-age=300',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, HEAD, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
            }
            
            # Force correct content type header for CSS files
            if path.endswith('.css'):
                headers['Content-Type'] = 'text/css; charset=utf-8'
            elif path.endswith('.js'):
                headers['Content-Type'] = 'application/javascript; charset=utf-8'
            
            # Prepare response
            if is_binary:
                response = {
                    'statusCode': 200,
                    'headers': headers,
                    'body': base64.b64encode(decoded_content).decode('utf-8'),
                    'isBase64Encoded': True
                }
            else:
                response = {
                    'statusCode': 200,
                    'headers': headers,
                    'body': decoded_content,
                    'isBase64Encoded': False
                }
            
            return response
        
        # File not found - return proper 404 instead of index.html
        print(f"File not found: {path}")
        print(f"Available files in STATIC_FILES: {list(STATIC_FILES.keys())}")
        
        # If requesting a CSS file that's not found, ensure proper content type
        if path.endswith('.css'):
            content_type = 'text/css; charset=utf-8'
            body_content = f'/* File not found: {path} */'
        elif path.endswith('.js'):
            content_type = 'application/javascript; charset=utf-8'
            body_content = f'// File not found: {path}'
        elif path.endswith('.md'):
            content_type = 'text/markdown; charset=utf-8'
            body_content = f'# File not found: {path}'
        else:
            content_type = 'text/plain'
            body_content = f'File not found: {path}'
            
        return {
            'statusCode': 404,
            'headers': {
                'Content-Type': content_type,
                'Access-Control-Allow-Origin': '*',
            },
            'body': body_content,
            'isBase64Encoded': False
        }
        
    except Exception as e:
        print(f"Error: {str(e)}")
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'text/plain',
                'Access-Control-Allow-Origin': '*',
            },
            'body': f'Internal server error: {str(e)}',
            'isBase64Encoded': False
        }